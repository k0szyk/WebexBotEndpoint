import json
import flask
import logging
import time
import requests
from flask import request
from flask_api import status
from cards import createIncidentCard, createWelcomeCard, previousIncidentsCard, createFeedbackCard, createUpdateIncidentCard, create_emergency_incident_card
from serviceNowLibrary import getAccessToken, getIncidentSysId, getUserSysId, get_element_parameter, createIncident, updateIncident, getPreviousIncidents, putWorkComment, approval, getApproval, getApprovalbyChangeId
from webexLibrary import getWebexItemDetails, postWebexMessage, deleteWebexMessage, createWebexMeeting, refreshWebexToken
from connectDb import connect, updateAccessToken
from domains import domains

logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s', filename='./WebexBotEndpoint.log', filemode='a')
#Retrieving credentials from database
credentials = connect("credentials", "name, value")

webexAppId = credentials["webexAppId"] #AppId that identifies the bot.
botToken = credentials["botToken"] #Token Used to authenticate against the Webex API.
feedbackSpaceId = credentials["feedbackSpaceId"] #SpaceId that is used to leave feedback.
botEmailAddress = credentials["botEmailAddress"]
xApiKey = credentials["X-Api-Key"]
webex_client_id = credentials["webexClientId"]
webex_secret_id = credentials["webexSecretId"]
#webexOrgId = credentials["webexOrgId"]

#Retrieving urls from database
urls = connect("urls", "name, value")

webexUrl = urls["webexUrl"] #URL to Webex API.
getMessageDetailsUrl = urls["getMessageDetailsUrl"] #URL for message resource in Webex API.
getRoomDetailsUrl = urls["getRoomDetailsUrl"] #URL for room resource in Webex API.
getAttachmentDetailsUrl = urls["getAttachmentDetailsUrl"] #URL for attachment resource in Webex API.
getPersonDetailsUrl = urls["getPersonDetailsUrl"] #URL for person resource in Webex API.
url = urls["snowUrl"] #ServiceNow URL.
iconUrl = urls["iconUrl"] #Icon URL (branding).
faqUrl = urls["faqUrl"] #Frequently Asked Questions URL.
spaceIdUrl = urls["spaceIdUrl"] #URL to Webex space to get some assistance with ServiceNow bot.

helpMessageGroup = "This is a help message for **ServiceNow Bot!**<br />\
                In order to use ServiceNow Bot you can issue following commands to interact with it.<br />\
                ```@ServiceNowBot help``` - help information.<br />\
                ```@ServiceNowBot update``` - displays the update card.<br />\
                ```@ServiceNowBot create incident``` - opens a new ServiceNow incident.<br />\
                ```@ServiceNowBot assign``` - assigns a new ServiceNow incident to yourself (your account need to have correct priviliges).<br />\
                ```@ServiceNowBot assign <email_address>``` - assigns a new ServiceNow incident to specified person (your account need to have correct priviliges).<br />"
markdownDisabledMessage = "This message is intended to be an interactive Webex card. If you do not see the interactive card it is most likely that your Webex application has the markdown option disabled."
incidentStates = {"1": "New", "2": "In Progress", "3": "On Hold", "4": "Canceled", "5": "Unknown", "6": "Resolved", "7": "Closed", "8": "Unknown", "9": "Unknown"}

app = flask.Flask(__name__)


def updateCommand(input: dict, botToken: str, webexUrl: str, getRoomDetailsUrl: str) -> dict:
    """
    Prepares data given by "@ServiceNowBot update <comments>" command and sends it over to putWorkComment function.
    
    :param input: Dictionary with details of the Webex message "@ServiceNowBot update <comments>" sent by user.
    :param botToken: String with botToken information used for Webex API authentication.
    :param webexUrl: URL string for Webex API.
    :param getRoomDetailsUrl: URN string that identifies the Room resources within Webex API. 
    :return: Dictionary with ServiceNow API response message generated by serviceNowLibrary.putWorkComment function.
    """
    if "Bot update" in input["text"]:
        comment = "User " + input["personEmail"] + " has added a comment: " + input["text"].split("Bot update")[1]
    else:
        comment = "User " + input["personEmail"] + " has added a comment: " + input["text"]
    roomId = input["roomId"]
    if not input["incidentNumber"]:
        response = getWebexItemDetails(botToken, roomId, webexUrl, getRoomDetailsUrl)
        incidentNumber = response["title"].split(" [")[0]
    else:
        incidentNumber = input["incidentNumber"]
    responseAccessToken = getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])
    accessToken = responseAccessToken["access_token"]
    responseIncidentSysId = getIncidentSysId(accessToken, incidentNumber, url)
    responseWorkComment = putWorkComment(accessToken, responseIncidentSysId["result"][0]["sys_id"], url, comment)
    return responseWorkComment


def assignIncident(input: dict, botToken: str, webexUrl: str, getRoomDetailsUrl: str, assignee: str) -> dict:
    """
    Prepares data given by "@ServiceNowBot assign <email_address>" command and sends it over to updateIncident function.
    
    :param input: Dictionary with details of the Webex message: "@ServiceNowBot assign <email_address>" sent by user.
    :param botToken: String with botToken information used for Webex API authentication.
    :param webexUrl: URL string for Webex API.
    :param getRoomDetailsUrl: URN string that identifies the Room resources within Webex API. 
    :param assignee: Sys_id string that identifies a user account in ServiceNow.
    :return: Dictionary with ServiceNow API response message generated by serviceNowLibrary.updateIncident function.
    """
    assignee = {"assigned_to": assignee}
    roomId = input["roomId"]
    response = getWebexItemDetails(botToken, roomId, webexUrl, getRoomDetailsUrl)
    incidentNumber = response["title"].split(" [")[0]
    responseAccessToken = getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])
    accessToken = responseAccessToken["access_token"]
    responseIncidentSysId = getIncidentSysId(accessToken, incidentNumber, url)
    responseUpdateIncident = updateIncident(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, responseIncidentSysId["result"][0]["sys_id"], assignee)
    return responseUpdateIncident


def createIncidentFlow(input: dict):
    """
    Prepares data given by Webex card: cards.createIncidentCard message to be send to ServiceNow and opens an Incident via serviceNowLibrary.createIncident function.
    
    :param input: Dictionary with details of the Webex card: cards.createIncidentCard sent by user.
    :return: Dictionary with the ServiceNow resposne to POST incident message (the API call to SerivceNow to create an incident).
    """
    responseGetPersonDetails = getWebexItemDetails(botToken, input["personId"], webexUrl, getPersonDetailsUrl)
    responseGetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
    if not responseGetUserSysId["result"]:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use an account existing in Service Now.")
        return ('Card received', 200)
    if len(input["inputs"]["shortDescription"]) == 0:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "In order to submit an incident please make sure that at least short description is filled in a card..")
        return ('Card received', 200)
    textMessage = "Thank you for submitting an incident via ServiceNow Bot. Please standy as your incident is created."
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    deleteWebexMessage(botToken, input["messageId"], webexUrl, getMessageDetailsUrl)
    if "\n" in input["inputs"]["fullDescription"]:
        input["inputs"]["fullDescription"] = input["inputs"]["fullDescription"].replace("\n"," ")
    responseCreateIncident = createIncident(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetUserSysId["result"][0]["sys_id"], url, input["inputs"]["shortDescription"], input["inputs"]["fullDescription"], input["inputs"]["urgency"], input["inputs"]["checkbox"])
    textMessage = "Please be advised that the Incident: ```" + responseCreateIncident["result"]["number"] + "``` has been created. Please use the **Webex space** or the following link to track your newly created Incident: [LINK](https://dev70378.service-now.com/sp?id=ticket&is_new_order=true&table=incident&sys_id=" + responseCreateIncident["result"]["sys_id"] + ")"
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return responseCreateIncident


def approvalFlow(input: dict):
    """
    Prepares data given by approval Webex card message to be send to ServiceNow and opens an approve/reject via serviceNowLibrary.approval function.

    :param input: Dictionary with details of the approval Webex card sent by user.
    :return: Dictionary with the ServiceNow resposne to PATCH approval message (the API call to SerivceNow to approve/reject a change).
    """
    responseGetPersonDetails = getWebexItemDetails(botToken, input["personId"], webexUrl, getPersonDetailsUrl)
    responseGetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
    reponseGetApproval = getApproval(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, input["inputs"]["sysid"])
    if not responseGetUserSysId["result"]:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl,"The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use an account existing in Service Now.")
        return ('Card received', 200)
    if  responseGetUserSysId["result"][0]["sys_id"] != reponseGetApproval["result"]["approver"]["value"]:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "Your Webex account email address does not match the Service Now approver email address. Please get in touch with ServiceNowBot team for further assistance.")
        return ('Card received', 200)
    textMessage = "Thank you for submitting your choice."
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    if "\n" in input["inputs"]["comments"]:
        input["inputs"]["comments"] = input["inputs"]["comments"].replace("\n"," ")
    logging.debug("input: {}, type: {}".format(input["inputs"]["sysid"], type(input["inputs"]["sysid"])))
    if input["inputs"]["approve"]:
        if input["inputs"]["comments"]:
            comments = "User {} has approved this request via Webex_Bot with comments: \"{}\".".format(responseGetPersonDetails["emails"][0], input["inputs"]["comments"])
        else:
            comments = "User {} has approved this request via Webex_Bot.".format(responseGetPersonDetails["emails"][0])
        data = {"state": "approved", "approver": responseGetUserSysId["result"][0]["sys_id"], "comments": comments}
        logging.debug("sysid: {}".format(input["inputs"]["sysid"]))
        approval(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, input["inputs"]["sysid"], data)
    else:
        if input["inputs"]["comments"]:
            comments = "User {} has rejected this request via Webex_Bot with comments: \"{}\".".format(responseGetPersonDetails["emails"][0], input["inputs"]["comments"])
        else:
            comments = "User {} has rejected this request via Webex_Bot.".format(responseGetPersonDetails["emails"][0])
        data = {"state": "rejected", "approver": responseGetUserSysId["result"][0]["sys_id"], "comments": comments}
        approval(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, input["inputs"]["sysid"], data)
    textMessage = "Please be advised that this Change Request has been {}.".format(data["state"])
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return


def approvalChangeRequestFlow(input: dict):
    """
    Prepares data given by Change Request Webex card message to be send to ServiceNow and opens an approve/reject via serviceNowLibrary.approval function.

    :param input: Dictionary with details of the approval Webex card sent by user.
    :return: Dictionary with the ServiceNow resposne to PATCH approval message (the API call to SerivceNow to approve/reject a change).
    """
    url = "https://dev70378.service-now.com"
    sysapproval_value = ""
    responseGetPersonDetails = getWebexItemDetails(botToken, input["personId"], webexUrl, getPersonDetailsUrl)
    responseGetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
    reponseGetApprovalbyChangeId = getApprovalbyChangeId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, input["inputs"]["sysid"])
    if not responseGetUserSysId["result"]:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl,"The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use an account existing in Service Now.")
        return ('Card received', 200)
    for element in reponseGetApprovalbyChangeId["result"]:
        if responseGetUserSysId["result"][0]["sys_id"] == element["approver"]["value"] and element["state"] == "requested":
            sysapproval_id = element["sys_id"]
    if not sysapproval_id:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "Your Webex account email address does not match the Service Now approver email address list. Please get in touch with ServiceNowBot team for further assistance.")
        return ('Card received', 200)
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "Thank you for submitting your choice.")
    if "\n" in input["inputs"]["comments"]:
        input["inputs"]["comments"] = input["inputs"]["comments"].replace("\n"," ")
    logging.debug("sysapproval_id: {}, type: {}".format(sysapproval_id, type(sysapproval_id)))
    if input["inputs"]["approve"]:
        if input["inputs"]["comments"]:
            comments = "User {} has approved this request via Webex_Bot with comments: \"{}\".".format(responseGetPersonDetails["emails"][0], input["inputs"]["comments"])
        else:
            comments = "User {} has approved this request via Webex_Bot.".format(responseGetPersonDetails["emails"][0])
        data = {"state": "approved", "approver": responseGetUserSysId["result"][0]["sys_id"], "comments": comments}
        approval(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, sysapproval_id, data)
    else:
        if input["inputs"]["comments"]:
            comments = "User {} has rejected this request via Webex_Bot with comments: \"{}\".".format(responseGetPersonDetails["emails"][0], input["inputs"]["comments"])
        else:
            comments = "User {} has rejected this request via Webex_Bot.".format(responseGetPersonDetails["emails"][0])
        data = {"state": "rejected", "approver": responseGetUserSysId["result"][0]["sys_id"], "comments": comments}
        approval(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, sysapproval_id, data)
    textMessage = "Please be advised that this Change Request has been {}.".format(data["state"])
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return


def updateWebexTokens(webexRefreshToken: str) -> dict:
    """
    Updates the Webex Tokens

    :param webexRefreshToken: String representing the Webex Refresh Token.
    :return:
    """
    logging.debug("UPDATING Webex Tokens")
    responseRefreshWebexToken = refreshWebexToken(webexRefreshToken, webex_client_id, webex_secret_id)
    webexAccessTokenExpiry = int(time.time()) + responseRefreshWebexToken["expires_in"]
    updateAccessToken('webex_tokens', responseRefreshWebexToken["access_token"], webexAccessTokenExpiry, 1)
    webexRefreshTokenExpiry = int(time.time()) + responseRefreshWebexToken["refresh_token_expires_in"]
    updateAccessToken('webex_tokens', responseRefreshWebexToken["refresh_token"], webexRefreshTokenExpiry, 2)
    return responseRefreshWebexToken


@app.route('/api/v1/resources/webhook', methods=['POST'])
def webhook():
    """
    Captures messages sent to ServiceNow bot via direct spaces or via @mention in group spaces. It applies bot logic to those messages.
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    if req["data"]["personEmail"] == botEmailAddress:
        logging.debug("RECEIVED a message from ServiceNow bot itself. The message was sent from: {}".format(req["data"]["personEmail"]))
        return ('Message received', 200)
    elif req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    responseMessage = getWebexItemDetails(botToken, req["data"]["id"], webexUrl, getMessageDetailsUrl)
    logging.debug("RECEIVED a message: \"{}\" from user: {}.".format(responseMessage["text"], responseMessage["personEmail"]))
    responseMessageList = " ".join(responseMessage["text"].split()).split(" ")
    if responseMessageList[0] == "ServiceNowBot":
        responseMessageList.pop(0)
    messageCommand = responseMessageList[0]
    logging.debug("RECEIVED a command message: {}".format(messageCommand))
    ### Verify if user email address is part 
    emailDomain = responseMessage["personEmail"].split("@")[1].strip()
    if emailDomain not in domains() and (emailDomain != "gmail.com" and responseMessage["personEmail"][0:5] != "eufun"):
        textMessage = "Unfortunately, your account is not part of the Webex organization. Please contact your IT Service Desk to resolve this issue."
        postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
        return ('Message received', 200)
    ### User typed in the "start/help etc." command.
    if messageCommand in ["help", "-h", "?", "/help", "start"]:
        if responseMessage["roomType"] == "direct":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
        elif responseMessage["roomType"] == "group":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, helpMessageGroup)
        return ('Message received', 200)
    ### User typed in the "assign" command.
    elif messageCommand == "assign" and responseMessage["roomType"] == "group":
        if len(responseMessageList) == 2 and "@" in responseMessageList[1]:
            responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseMessageList[1], url)
            if responsegetUserSysId["result"]:
                assignIncident(responseMessage, botToken, webexUrl, getRoomDetailsUrl, (responsegetUserSysId["result"][0]["sys_id"]))
            else:
                logging.error("NOT ASSIGNED a person to this incident as the ServiceNow does not have this account available: {}.".format(responseMessageList[1]))
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The incident was not assigned. The provided email addres: {} is invalid. Please verify the email address.".format(responseMessageList[1]))
        elif len(responseMessageList) == 1:
            responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseMessage["personEmail"], url)
            assignIncident(responseMessage, botToken, webexUrl, getRoomDetailsUrl, (responsegetUserSysId["result"][0]["sys_id"]))
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot``` help to list available commands.")
     ### User typed in the "update" (add comments) command.
    elif messageCommand == "update" and responseMessage["roomType"] == "group":
        response = getWebexItemDetails(botToken, responseMessage["roomId"], webexUrl, getRoomDetailsUrl)
        incidentNumber = response["title"].split(" [")[0]
        incidentList = [{"number": incidentNumber, "state": "Unknown"}]
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createUpdateIncidentCard(incidentList, iconUrl, "false", incidentNumber))
        return ('Message received', 200)
    elif len(responseMessageList) >= 2:
        ### User typed in the "create incident" command.
        if messageCommand == "create" and responseMessageList[1] == "incident":
            responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseMessage["personEmail"], url)
            if responsegetUserSysId["result"]:
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createIncidentCard(iconUrl))
            else:
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseMessage["personEmail"] + " is not available at ServiceNow. Please use account existing in Service Now.")
                return ('Message received', 200)
        elif messageCommand == "change" and responseMessageList[1] == "state":
            responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseMessage["personEmail"], url)
            if responsegetUserSysId["result"]:
                response = getWebexItemDetails(botToken, responseMessage["roomId"], webexUrl, getRoomDetailsUrl)
                incidentNumber = response["title"].split(" [")[0]
                responseGetIncident = getIncidentSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], incidentNumber, url)
                print(responseGetIncident)
                print(responsegetUserSysId)
                if responsegetUserSysId["result"][0]["sys_id"] == responseGetIncident["result"][0]["caller_id"]["value"] or responsegetUserSysId["result"][0]["sys_id"] == responseGetIncident["result"][0]["assigned_to"]["value"]:
                    logging.debug("MATCHED user issueing the command and the caller or assignee. Email address: {}, sys_id: {}".format(responsegetUserSysId["result"][0]["email"],["result"][0][sys_id]))
            else:
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseMessage["personEmail"] + " is not available at ServiceNow. Please use account existing in Service Now.")
                return ('Message received', 200)
        ### User typed in the unkown command.
        else:
            if responseMessage["roomType"] == "group":
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot help``` to list available commands.")
            if responseMessage["roomType"] == "direct":
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please type in ```help``` to receive available options.")
    ### User typed in the unkown command.
    else:
        if responseMessage["roomType"] == "group":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot help``` to list available commands.")
        if responseMessage["roomType"] == "direct":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please type in ```help``` to receive available options.")

    return ('Message received', 200)


@app.route('/api/v1/resources/webhook/cards', methods=['POST'])
def cards():
    """
    Captures attachment messages (Webex cards) sent to ServiceNow bot. It applies bot logic to those attachment messages (Webex cards).
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    #logging.debug("RECEIVED correct webexAppId: {}".format(req))
    if req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    responseMessage = getWebexItemDetails(botToken, req["data"]["id"], webexUrl, getAttachmentDetailsUrl)
    
    logging.debug("RECEIVED the message regarding card submission. Flow type: {}".format(responseMessage["inputs"]["flow"]))
    responseGetPersonDetails = getWebexItemDetails(botToken, responseMessage["personId"], webexUrl, getPersonDetailsUrl)
    deleteWebexMessage(botToken, responseMessage["messageId"], webexUrl, getMessageDetailsUrl)
    ### User pressed the "Submit" button while creating an incident.
    if responseMessage["inputs"]["flow"] == "createIncident":
        createIncidentFlow(responseMessage)
        responseGetWebexItemDetails = getWebexItemDetails(botToken, responseMessage["roomId"], webexUrl, getRoomDetailsUrl)
        if responseGetWebexItemDetails["type"] == "direct":
            time.sleep(3)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
    ### User pressed the "Creater Incident" button while in a Welcome Card.
    elif responseMessage["inputs"]["flow"] == "createIncidentCard":
        responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
        if responsegetUserSysId["result"]:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createIncidentCard(iconUrl))
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use account existing in Service Now.")
            return ('Message received', 200)
    ### User pressed the "Previous incidents" button while in a Welcome Card.
    elif responseMessage["inputs"]["flow"] == "previousIncidents":
        responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
        if responsegetUserSysId["result"]:
            responsGetPreviousIncidents = getPreviousIncidents(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, responsegetUserSysId["result"][0]["sys_id"], 5)
            incidentList = []
            for incident in responsGetPreviousIncidents["result"]:
                incidentDict = {"number": incident["number"], "state": incidentStates[incident["state"]], "shortDescription": incident["short_description"], "spaceId": incident["x_773797_webex_dem_spaceid"], "sysId": incident["sys_id"]}
                incidentList.append(incidentDict)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, previousIncidentsCard(incidentList, url, iconUrl))        
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow or there are no incidents opened against this account. Please use account existing in Service Now.")
            time.sleep(3)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
            return ('Message received', 200)
    ### User pressed the "Update an Incident" button while in a Welcome Card.
    elif responseMessage["inputs"]["flow"] == "updateIncident":
        responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
        if responsegetUserSysId["result"]:
            responsGetPreviousIncidents = getPreviousIncidents(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, responsegetUserSysId["result"][0]["sys_id"], 30)
            incidentList = []
            for incident in responsGetPreviousIncidents["result"]:
                incidentDict = {"number": incident["number"], "state": incidentStates[incident["state"]]}
                incidentList.append(incidentDict)
            logging.debug("createUpdateIncidentCard: {}".format(createUpdateIncidentCard(incidentList, iconUrl)))
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createUpdateIncidentCard(incidentList, iconUrl))
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow or there are no incidents opened against this account. Please use account existing in Service Now.")
            time.sleep(3)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
            return ('Message received', 200)
    ### User pressed the "Feedback" button while in a Welcome Card.
    elif responseMessage["inputs"]["flow"] == "feedback":
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createFeedbackCard(iconUrl))
    ### User pressed the "Submit" button while in a Feedback Card.
    elif responseMessage["inputs"]["flow"] == "submitFeedback":
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Thanks for sharing your opinion with us.")
        time.sleep(3)
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
        feedbackText = "User {} has shared feedback:<br /> _{}_".format(responseGetPersonDetails["emails"][0], responseMessage["inputs"]["feedbackText"])
        responsePostWebexMessage = postWebexMessage(botToken, feedbackSpaceId, webexUrl, getMessageDetailsUrl, feedbackText.replace("\n","<br />"))
        logging.debug("RECEIVED the response to sending a message: {}".format(responsePostWebexMessage))
    ### User pressed the "Submit" button while in a Update Incident Card in the 1:1 space with ServiceNow bot.
    elif responseMessage["inputs"]["flow"] == "submitUpdate":
        responseMessage["personEmail"] = responseGetPersonDetails["emails"][0]
        responseMessage["text"] = responseMessage["inputs"]["updateText"]
        responseMessage["incidentNumber"] = responseMessage["inputs"]["incidentNumber"]
        logging.debug("RECEIVED Update Incident Card submit with Incident Number: {} and update text: {}".format(responseMessage["inputs"]["incidentNumber"], responseMessage["text"]))
        if responseMessage["inputs"]["updateText"] and responseMessage["inputs"]["incidentNumber"]:
            responseWorkComment = updateCommand(responseMessage, botToken, webexUrl, getRoomDetailsUrl)
            if responseWorkComment.status_code == 200:
                responseWorkComment = json.loads(responseWorkComment.text)
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Your comment has been added to the incident: ```" + responseWorkComment["result"]["number"] + "```.")
            time.sleep(3)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Either there was no comments/updated added or incident number was not selected. Please make sure that you enter all required values.")
            responsegetUserSysId = getUserSysId(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], responseGetPersonDetails["emails"][0], url)
            time.sleep(3)
            responsGetPreviousIncidents = getPreviousIncidents(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, responsegetUserSysId["result"][0]["sys_id"], 30)
            incidentList = []
            for incident in responsGetPreviousIncidents["result"]:
                incidentDict = {"number": incident["number"], "state": incidentStates[incident["state"]]}
                incidentList.append(incidentDict)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createUpdateIncidentCard(incidentList, iconUrl))
    ### User pressed the "Go Back" button.
    elif responseMessage["inputs"]["flow"] == "goBack":
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
    ### User pressed the "Submit" button while in a Update Incident Card in the groups space.
    elif responseMessage["inputs"]["flow"] == "submitUpdateDirect":
        responseMessage["personEmail"] = responseGetPersonDetails["emails"][0]
        responseMessage["text"] = responseMessage["inputs"]["updateText"]
        responseMessage["incidentNumber"] = responseMessage["inputs"]["incidentNumber"]
        responseWorkComment = updateCommand(responseMessage, botToken, webexUrl, getRoomDetailsUrl)
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Your comment has been added to this incident.")
        return ('Card received for submitUpdateDirect', 200)
    ### User pressed the "submit" button while working in Emergency Incident space.
    elif responseMessage["inputs"]["flow"] == "submitUpdateEmergency":
        responseMessage["personEmail"] = responseGetPersonDetails["emails"][0]
        responseMessage["text"] = responseMessage["inputs"]["updateText"]
        responseMessage["incidentNumber"] = responseMessage["inputs"]["incidentNumber"]
        logging.debug("RECEIVED Update Incident Card submit with Incident Number: {} and update text: {}".format(
            responseMessage["inputs"]["incidentNumber"], responseMessage["text"]))
        if responseMessage["inputs"]["updateText"] and responseMessage["inputs"]["incidentNumber"]:
            responseWorkComment = updateCommand(responseMessage, botToken, webexUrl, getRoomDetailsUrl)
            if responseWorkComment.status_code == 200:
                responseWorkComment = json.loads(responseWorkComment.text)
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl,"Your comment has been added to the incident: ```" + responseWorkComment["result"]["number"] + "```.")
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "There was no comments/notes added. Please make sure that you enter all required values.")
        time.sleep(3)
        emergency_card = create_emergency_incident_card(responseMessage["incidentNumber"], iconUrl,responseMessage["inputs"]["webLink"], url)
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, emergency_card)
    ### User pressed the "approve/reject" button while working with Change Mangement (approval flow).
    elif responseMessage["inputs"]["flow"] == "approval":
        logging.debug("APPROVAL FLOW: received the message: {}".format(responseMessage))
        approvalFlow(responseMessage)
    ### User pressed the "approve/reject" button while working with Change Mangement (change flow).
    elif responseMessage["inputs"]["flow"] == "approvalChangeRequest":
        logging.debug("APPROVAL FLOW: received the message: {}".format(responseMessage))
        approvalChangeRequestFlow(responseMessage)
    else:
        textMessage = "This is embarrassing. ServiceNow bot encountered critical error. "
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return ('Card received', 200)


@app.route('/api/v1/resources/webhook/membership', methods=['POST'])
def membership():
    """
    Captures membership create events applied to ServiceNow bot. This represents either adding ServiceNow bot to group space or opening a 1:1 (direct) space with ServiceNow bot.
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    if req["data"]["personEmail"] == botEmailAddress:
        logging.debug("RECEIVED a message from ServiceNow bot itself. The message was sent from: {}".format(req["data"]["personEmail"]))
        return ('Message received', 200)
    elif req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    responseGetWebexItemDetails = getWebexItemDetails(botToken, req["data"]["roomId"], webexUrl, getRoomDetailsUrl)
    responseGetPersonDetails = getWebexItemDetails(botToken, responseGetWebexItemDetails["creatorId"], webexUrl, getPersonDetailsUrl)
    logging.debug("RECEIVED room details: {}".format(responseGetWebexItemDetails))
    logging.debug("RECEIVED a notification about new space created with user: {} in a space type: {}.".format(responseGetPersonDetails["emails"][0], responseGetWebexItemDetails["type"]))
    emailDomain = responseGetPersonDetails["emails"][0].split("@")[1]
    if (emailDomain in domains() or (emailDomain == "gmail.com" and responseGetPersonDetails["emails"][0][0:5] == "eufun")) and responseGetWebexItemDetails["type"] == "direct":
        textMessage = "Welcome! **ServiceNow bot** is at your service. <br />Please take a look at the below options or type in help:"
        postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
        responsePostWebexMessage = postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard(iconUrl, faqUrl, spaceIdUrl))
        logging.debug("RECEIVED the response to the createWelcomeCard: {}".format(responsePostWebexMessage))
    elif responseGetWebexItemDetails["type"] == "direct":
        textMessage = "Unfortunately, your account is not part of the Webex organization. Please contact your IT Service Desk to resolve this issue."
        postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return ('Membership received', 200)


@app.route('/api/v1/resources/webhook/emergency', methods=['POST'])
def emergency():
    """
    Captures POST request from ServiceNow to create an emergency Webex meeting and update the Incident Webex space.

    :return: The HTTP response to a POST method received from ServiceNow.
    """
    req = request.json
    headers = flask.request.headers
    headers_dict = dict()
    # Create a dictionary with HTTP headers.
    for h in headers:
        headers_dict[h[0]] = h[1]
    # Checks for "X-Api-Key" key in dictionary.
    if "X-Api-Key" not in headers_dict:
        logging.debug("RECEIVED a request without the required X-Api-Key header.")
        return "Unauthorized", status.HTTP_401_UNAUTHORIZED
    elif headers_dict["X-Api-Key"] != xApiKey:
        logging.debug("RECEIVED a request with incorrect X-Api-Key header.")
        return "Unauthorized", status.HTTP_401_UNAUTHORIZED
    logging.debug("RECEIVED POST message from ServiceNow to create an Emergency Webex Meeting")
    logging.debug("POST message details: {}".format(req))
    # Retrieve webexTokens from database
    webexTokens = connect("webex_tokens", "name, value, expiry")
    webexAccessToken = webexTokens["access_token"][0]
    webexAccessTokenExpiry = int(webexTokens["access_token"][1])
    webexRefreshToken = webexTokens["refresh_token"][0]
    webexRefreshTokenExpiry = int(webexTokens["refresh_token"][1])
    if webexRefreshTokenExpiry <= int(time.time()) - 60:
        logging.debug("Webex Refresh Token will shortly expire. Expiry Epoch time: {}".format(webexRefreshTokenExpiry))
        webexAccessToken = updateWebexTokens(webexRefreshToken)["access_token"]
    if webexAccessTokenExpiry <= int(time.time()) - 60:
        logging.debug("Webex Access Token will shortly expire. Expiry Epoch time: {}".format(webexAccessTokenExpiry))
        webexAccessToken = updateWebexTokens(webexRefreshToken)["access_token"]
    logging.debug("RECEIVED the following watchman list from ServiceNow: {}.".format(req["inviteeSysId"]))
    if req["inviteeSysId"]:
        if len(req["inviteeSysId"].split(',')) > 1:
            watchman_query = 'sys_id=' + '^ORsys_id='.join(req["inviteeSysId"].split(',')) + '&sysparm_fields=email,name'
        else:
            watchman_query = 'sys_id=' + req["inviteeSysId"] + '&sysparm_fields=email,name'
        response_watchman_emails = get_element_parameter(getAccessToken(credentials["clientId"], credentials["clientSecret"], credentials["refreshToken"], url, credentials["username"], credentials["password"])["access_token"], url, "sys_user", watchman_query)
        response_watchman_emails = response_watchman_emails["result"]
        for element in response_watchman_emails:
            element["displayName"] = element["name"]
            del element["name"]
            element["coHost"] = True
    else:
        response_watchman_emails = []
    meeting_attributes = {'title': '{} - {}'.format(req["incidentNumber"], req["shortDescription"]),
                          'start': time.strftime("%Y-%m-%dT%H:%M:%S+00:00", time.localtime(time.time() + 180)),
                          'end': time.strftime("%Y-%m-%dT%H:%M:%S+00:00", time.localtime(time.time() + (60*63))),
                          'hostEmail': req["hostEmail"],
                          'siteUrl': "aontest.webex.com",
                          'invitees': response_watchman_emails}
    logging.debug("Preparing a POST message to create a Webex Meeting with following attributes: {}".format(meeting_attributes))
    reseponseCreateWebexMeeting = createWebexMeeting(webexAccessToken, meeting_attributes, webexUrl)
    emergency_card = create_emergency_incident_card(req["incidentNumber"], iconUrl, reseponseCreateWebexMeeting["webLink"], url)
    postWebexMessage(botToken, req["spaceId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, emergency_card)
    response = {"meetingNumber": reseponseCreateWebexMeeting["meetingNumber"],
                "webLink": reseponseCreateWebexMeeting["webLink"],
                "sipAddress": reseponseCreateWebexMeeting["sipAddress"]}
    response = json.dumps(response)
    return response, 200


@app.route("/", methods=['Get'])
def hello():
    return "<h1 style='color:blue'>Hello There!</h1>"
    
#app.run(ssl_context='adhoc')
#application = app
#if __name__ == "__main__":
#application = app
#app.run()
#app.run(ssl_context='adhoc')
#pp = flask.Flask(__name__)app.run(host='0.0.0.0', port=5002, ssl_context='adhoc')
