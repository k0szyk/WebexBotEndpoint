from codecs import strict_errors
import json
import flask
import logging
import time
from flask import request
from cards import createIncidentCard, createWelcomeCard, previousIncidentsCard, createFeedbackCard
from serviceNowLibrary import getRefreshToken, getAccessToken, getIncidentSysId, getUserSysId, createIncident, updateIncident, getPreviousIncidents, putWorkComment
from webexLibrary import getWebexItemDetails, postWebexMessage, deleteWebexMessage
from domains import domains

logging.basicConfig(level=logging.DEBUG,format='%(asctime)s %(levelname)s %(message)s', filename='./WebexBotEndpoint.log', filemode='a')
clientId = "ddbddd39a4b10110bebfa2dcd57241bc"
clientSecret = "MiyNOb<iKU"
username = "webex.bot"
password = "koszyK)0"
refreshToken = "nVaWXXFFUGeUDM4dgMT2HvMWFOHLZGnJnmJSrcWSXHzeuBgpgkgBBHUFwzELCWYZKK5yVhwCPonjBaCHupLR2w"
url = "https://dev70378.service-now.com"
#additionalComment = "User X added a comment via Webex application: Yet another comment!!!"

webexUrl = "https://webexapis.com/"
getMessageDetailsUrl = "v1/messages/"
getRoomDetailsUrl = "v1/rooms/"
getAttachmentDetailsUrl = "v1/attachment/actions/"
getPersonDetailsUrl = "v1/people/"

botToken = "OTI5NGY2OTUtNzhhYS00ZDVmLTg0ODktZDAxMjQ3NDM4ZTFiYmEyMGI4MTAtNGQx_PF84_3889a4c9-3174-445a-b3b8-b0528d045fab"
webexOrgId = "Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8xZTAwZTkyMi01ZWM2LTRmM2ItOTZhMy0zNDhkOTEyODhkNmQ"
webexAppId = "Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OL0MzMmM4MDc3NDBjNmU3ZGYxMWRhZjE2ZjIyOGRmNjI4YmJjYTQ5YmE1MmZlY2JiMmM3ZDUxNWNiNGEwY2M5MWFh"
feedbackSpaceId = "Y2lzY29zcGFyazovL3VzL1JPT00vM2MxNTc3MzAtOWZhNi0xMWVjLTlmMzUtNmQyY2I5YWY5MmRh"
botEmailAddress = "ServiceNowTest@webex.bot"

helpMessageGroup = "This is a help message for **ServiceNow Bot!**<br />\
                In order to use ServiceNow Bot you can issue following commands to interact with it.<br />\
                ```@ServiceNowBot help``` - help information.<br />\
                ```@ServiceNowBot update <comments>``` - updates the ServiceNow ticket with comments.<br />\
                ```@ServiceNowBot create incident``` - opens a new ServiceNow incident.<br />\
                ```@ServiceNowBot assign``` - assigns a new ServiceNow incident to yourself (your account need to have correct priviliges).<br />\
                ```@ServiceNowBot assign <email_address>``` - assigns a new ServiceNow incident to specified person (your account need to have correct priviliges).<br />"

markdownDisabledMessage = "This message is intended to be an interactive Webex card. If you do not see the interactive card it is most likely that your Webex application has the markdown option disabled."

incidentStates = {"1": "New", "2": "In Progress", "3": "On Hold", "4": "Canceled", "5": "Unknown", "6": "Resolved", "7": "Closed", "8": "Unknown", "9": "Unknown"}

app = flask.Flask(__name__)


def updateCommand(input: dict, botToken: str, webexUrl: str, getRoomDetailsUrl: str) -> dict:
    """
    Prepares data given by "@ServiceNowBot update <comments>" command and sends it over to putWorkComment function.
    
    :param input: Dictionary with details of the Webex message "@ServiceNowBot update <comments>" sent by user.
    :param botToken: String with botToken information used for Webex API authentication.
    :param webexUrl: URL string for Webex API.
    :param getRoomDetailsUrl: URN string that identifies the Room resources within Webex API. 
    :return: Dictionary with ServiceNow API response message generated by serviceNowLibrary.putWorkComment function.
    """
    comment = "User " + input["personEmail"] + " has added a comment: " + input["text"].split("Bot update")[1]
    roomId = input["roomId"]
    response = getWebexItemDetails(botToken, roomId, webexUrl, getRoomDetailsUrl)
    incidentNumber = response["title"].split(" [")[0]
    responseAccessToken = getAccessToken(clientId, clientSecret, refreshToken, url, username, password)
    accessToken = responseAccessToken["access_token"]
    responseIncidentSysId = getIncidentSysId(accessToken, incidentNumber, url)
    responseWorkComment = putWorkComment(accessToken, responseIncidentSysId["result"][0]["sys_id"], url, comment)
    return responseWorkComment


def assignIncident(input: dict, botToken: str, webexUrl: str, getRoomDetailsUrl: str, assignee: str) -> dict:
    """
    Prepares data given by "@ServiceNowBot assign <email_address>" command and sends it over to updateIncident function.
    
    :param input: Dictionary with details of the Webex message: "@ServiceNowBot assign <email_address>" sent by user.
    :param botToken: String with botToken information used for Webex API authentication.
    :param webexUrl: URL string for Webex API.
    :param getRoomDetailsUrl: URN string that identifies the Room resources within Webex API. 
    :param assignee: Sys_id string that identifies a user account in ServiceNow.
    :return: Dictionary with ServiceNow API response message generated by serviceNowLibrary.updateIncident function.
    """
    assignee = {"assigned_to": assignee}
    roomId = input["roomId"]
    response = getWebexItemDetails(botToken, roomId, webexUrl, getRoomDetailsUrl)
    incidentNumber = response["title"].split(" [")[0]
    responseAccessToken = getAccessToken(clientId, clientSecret, refreshToken, url, username, password)
    accessToken = responseAccessToken["access_token"]
    responseIncidentSysId = getIncidentSysId(accessToken, incidentNumber, url)
    responseUpdateIncident = updateIncident(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], url, responseIncidentSysId["result"][0]["sys_id"], assignee)
    return responseUpdateIncident


def createIncidentFlow(input: dict) -> dict:
    """
    Prepares data given by Webex card: cards.createIncidentCard message to be send to ServiceNow and opens an Incident via serviceNowLibrary.createIncident function.
    
    :param input: Dictionary with details of the Webex card: cards.createIncidentCard sent by user.
    :return: Dictionary with the ServiceNow resposne to POST incident message (the API call to SerivceNow to create an incident).
    """
    responseGetPersonDetails = getWebexItemDetails(botToken, input["personId"], webexUrl, getPersonDetailsUrl)
    responseGetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseGetPersonDetails["emails"][0], url)
    if not responseGetUserSysId["result"]:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use an account existing in Service Now.")
        return ('Card received', 200)
    if len(input["inputs"]["shortDescription"]) == 0:
        postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, "In order to submit an incident please make sure that at least short description is filled in a card..")
        return ('Card received', 200)
    textMessage = "Thank you for submitting an incident via ServiceNow Bot. Please standy as your incident is created."
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    deleteWebexMessage(botToken, input["messageId"], webexUrl, getMessageDetailsUrl)
    if "\n" in input["inputs"]["fullDescription"]:
        input["inputs"]["fullDescription"] = input["inputs"]["fullDescription"].replace("\n"," ")
    responseCreateIncident = createIncident(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseGetUserSysId["result"][0]["sys_id"], url, input["inputs"]["shortDescription"], input["inputs"]["fullDescription"], input["inputs"]["urgency"], input["inputs"]["checkbox"])
    textMessage = "Please be advised that the Incident: ```" + responseCreateIncident["result"]["number"] + "``` has been created. Please use the **Webex space** or the following link to track your newly created Incident: [LINK](https://dev70378.service-now.com/sp?id=ticket&is_new_order=true&table=incident&sys_id=" + responseCreateIncident["result"]["sys_id"] + ")"
    postWebexMessage(botToken, input["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return responseCreateIncident


@app.route('/api/v1/resources/webhook', methods=['POST'])
def webhook():
    """
    Captures messages sent to ServiceNow bot via direct spaces or via @mention in group spaces. It applies bot logic to those messages.
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    if req["data"]["personEmail"] == botEmailAddress:
        logging.debug("RECEIVED a message from ServiceNow bot itself. The message was sent from: {}".format(req["data"]["personEmail"]))
        return ('Message received', 200)
    elif req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    responseMessage = getWebexItemDetails(botToken, req["data"]["id"], webexUrl, getMessageDetailsUrl)
    logging.debug("RECEIVED a message: \"{}\" from user: {}.".format(responseMessage["text"], responseMessage["personEmail"]))
    responseMessageList = " ".join(responseMessage["text"].split()).split(" ")
    if responseMessageList[0] == "ServiceNowBot":
        responseMessageList.pop(0)
    messageCommand = responseMessageList[0]
    logging.debug("RECEIVED a command message: {}".format(messageCommand))
    if messageCommand in ["help", "-h", "?", "/help", "start"]:
        if responseMessage["roomType"] == "direct":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard())
        elif responseMessage["roomType"] == "group":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, helpMessageGroup)
        return ('Message received', 200)
    elif messageCommand == "assign" and responseMessage["roomType"] == "group":
        if len(responseMessageList) == 2 and "@" in responseMessageList[1]:
            responsegetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseMessageList[1], url)
            if responsegetUserSysId["result"]:
                assignIncident(responseMessage, botToken, webexUrl, getRoomDetailsUrl, (responsegetUserSysId["result"][0]["sys_id"]))
            else:
                logging.error("NOT CREATED and incident as the ServiceNow does not have this account available: {}.".format(responseMessageList[1]))
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The incident was not assigned. The provided email addres: {} is invalid. Please verify the email address.".format(responseMessageList[1]))
        elif len(responseMessageList) == 1:
            responsegetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseMessage["personEmail"], url)
            assignIncident(responseMessage, botToken, webexUrl, getRoomDetailsUrl, (responsegetUserSysId["result"][0]["sys_id"]))
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot``` help to list available commands.")
    elif len(responseMessageList) >= 2:
        if messageCommand == "update" and responseMessage["roomType"] == "group":
            responseWorkComment = updateCommand(responseMessage, botToken, webexUrl, getRoomDetailsUrl)
            if responseWorkComment.status_code == 200:
                responseWorkComment = json.loads(responseWorkComment.text)
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Your comment has been added to the incident: ```" + responseWorkComment["result"]["number"] + "```.")
            return ('Message received', 200)
        elif messageCommand == "create" and responseMessageList[1] == "incident":
            responsegetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseMessage["personEmail"], url)
            if responsegetUserSysId["result"]:
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createIncidentCard())
            else:
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseMessage["personEmail"] + " is not available at ServiceNow. Please use account existing in Service Now.")
                return ('Message received', 200)
        else:
            if responseMessage["roomType"] == "group":
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot help``` to list available commands.")
            if responseMessage["roomType"] == "direct":
                postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please type in ```help``` to receive available options.")
    else:
        if responseMessage["roomType"] == "group":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please use the ```@ServiceNowBot help``` to list available commands.")
        if responseMessage["roomType"] == "direct":
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "ServiceNow Bot has not recognized the command provided. Please type in ```help``` to receive available options.")

    return ('Message received', 200)


@app.route('/api/v1/resources/webhook/cards', methods=['POST'])
def cards():
    """
    Captures attachment messages (Webex cards) sent to ServiceNow bot. It applies bot logic to those attachment messages (Webex cards).
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    logging.debug("RECEIVED correct webexAppId: {}".format(req))
    if req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    responseMessage = getWebexItemDetails(botToken, req["data"]["id"], webexUrl, getAttachmentDetailsUrl)
    logging.debug("RECEIVED the message regarding card submission. Flow type: {}".format(responseMessage["inputs"]["flow"]))
    responseGetPersonDetails = getWebexItemDetails(botToken, responseMessage["personId"], webexUrl, getPersonDetailsUrl)
    deleteWebexMessage(botToken, responseMessage["messageId"], webexUrl, getMessageDetailsUrl)
    if responseMessage["inputs"]["flow"] == "createIncident":
        createIncidentFlow(responseMessage)
        responseGetWebexItemDetails = getWebexItemDetails(botToken, responseMessage["roomId"], webexUrl, getRoomDetailsUrl)
        if responseGetWebexItemDetails["type"] == "direct":
            time.sleep(3)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard())
    elif responseMessage["inputs"]["flow"] == "createIncidentCard":
        responsegetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseGetPersonDetails["emails"][0], url)
        if responsegetUserSysId["result"]:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createIncidentCard())
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use account existing in Service Now.")
            return ('Message received', 200)
    elif responseMessage["inputs"]["flow"] == "previousIncidents":
        responsegetUserSysId = getUserSysId(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], responseGetPersonDetails["emails"][0], url)
        if responsegetUserSysId["result"]:
            responsGetPreviousIncidents = getPreviousIncidents(getAccessToken(clientId, clientSecret, refreshToken, url, username, password)["access_token"], url, responsegetUserSysId["result"][0]["sys_id"], 5)
            incidentList = []
            for incident in responsGetPreviousIncidents["result"]:
                incidentDict = {"number": incident["number"], "state": incidentStates[incident["state"]], "shortDescription": incident["short_description"], "spaceId": incident["x_773797_webex_dem_spaceid"], "sysId": incident["sys_id"]}
                incidentList.append(incidentDict)
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, previousIncidentsCard(incidentList, url))        
        else:
            postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "The account associated with your email: " + responseGetPersonDetails["emails"][0] + " is not available at ServiceNow. Please use account existing in Service Now.")
            return ('Message received', 200)
    elif responseMessage["inputs"]["flow"] == "feedback":
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createFeedbackCard())
    elif responseMessage["inputs"]["flow"] == "submitFeedback":
        print(responseMessage)
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, "Thanks for sharing your opinon with us.")
        time.sleep(3)
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard())
        feedbackText = "User {} has shared feedback:<br /> ```{}``` ".format(responseGetPersonDetails["emails"][0], responseMessage["inputs"]["feedbackText"])
        responsePostWebexMessage = postWebexMessage(botToken, feedbackSpaceId, webexUrl, getMessageDetailsUrl, feedbackText)
        logging.debug("RECEIVED the response to sending a message: {}".format(responsePostWebexMessage))
    elif responseMessage["inputs"]["flow"] == "goBack":
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard())
    else:
        textMessage = "This is embarrassing. ServiceNow bot encountered critical error. "
        postWebexMessage(botToken, responseMessage["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return ('Card received', 200)


@app.route('/api/v1/resources/webhook/membership', methods=['POST'])
def membership():
    """
    Captures membership create events applied to ServiceNow bot. This represent either adding ServiceNow bot to group space or opening a 1:1 (direct) space with ServiceNow bot.
    
    :return: The HTTP response to a POST method received from Webex API.
    """
    req = request.json
    if req["data"]["personEmail"] == botEmailAddress:
        logging.debug("RECEIVED a message from ServiceNow bot itself. The message was sent from: {}".format(req["data"]["personEmail"]))
        return ('Message received', 200)
    elif req["appId"] != webexAppId:
        logging.error("RECEIVED incorrect webexAppId: {}".format(req["appId"]))
        return ('Incorrect appId', 401)
    else:
        logging.debug("RECEIVED correct webexAppId: {}".format(req["appId"]))
    #logging.debug("RECEIVED membership creation event: {}".format(req))
    responseGetWebexItemDetails = getWebexItemDetails(botToken, req["data"]["roomId"], webexUrl, getRoomDetailsUrl)
    responseGetPersonDetails = getWebexItemDetails(botToken, responseGetWebexItemDetails["creatorId"], webexUrl, getPersonDetailsUrl)
    logging.debug("RECEIVED room details: {}".format(responseGetWebexItemDetails))
    logging.debug("RECEIVED a notification about new space created with user: {} in a space type: {}.".format(responseGetPersonDetails["emails"][0], responseGetWebexItemDetails["type"]))
    emailDomain = responseGetPersonDetails["emails"][0].split("@")[1]
    if (emailDomain in domains() or emailDomain == "gmail.com") and responseGetWebexItemDetails["type"] == "direct":
        textMessage = "Welcome! **ServiceNow bot** is at your service. <br />Please take a look at the below options or type in help:"
        postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
        responsePostWebexMessage = postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, markdownDisabledMessage, createWelcomeCard())
        logging.debug("RECEIVED the response to the createWelcomeCard: ".format(responsePostWebexMessage))
    elif responseGetWebexItemDetails["type"] == "direct":
        textMessage = "Unfortunately, your account is not part of the AON Webex organization. Please contact your IT Service Desk to resolve this issue."
        postWebexMessage(botToken, req["data"]["roomId"], webexUrl, getMessageDetailsUrl, textMessage)
    return ('Membership received', 200)

app.run(host='0.0.0.0', port=5002, ssl_context='adhoc')
